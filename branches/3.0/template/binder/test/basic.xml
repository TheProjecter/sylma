<?xml version="1.0" encoding="utf-8"?>
<tst:tests
  xmlns:tst="http://www.sylma.org/modules/tester/parser"
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:view="http://2013.sylma.org/view"
  xmlns:le="http://2013.sylma.org/action"
  xmlns:lm="none"
  xmlns:la="http://2013.sylma.org/template/binder"
  xmlns:tpl="http://2013.sylma.org/template"
  xmlns:stp="http://2013.sylma.org/schema/template"
  xmlns:sql="http://2013.sylma.org/storage/sql"
  xmlns:ls="http://2013.sylma.org/parser/security"
  xmlns:js="http://2013.sylma.org/template/binder"
  xmlns:user="http://2013.sylma.org/view/test/sample1"
  xmlns:group="http://2013.sylma.org/view/test/sample2"
>
  <tst:description>JS</tst:description>
  <tst:test name="Base object">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div la:class="sylma.ui.Base" la:parent="example" la:name="test">world</div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;
      var node = test.getNode();

      return node.get('text') === 'world';
    </tst:expected>
  </tst:test>
  <tst:test name="Base object with @id">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div id="hello" la:class="sylma.ui.Base" la:parent="example" la:name="test">world</div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;
      var node = $('hello');

      return node.get('text') === 'world';
    </tst:expected>
  </tst:test>
  <tst:test name="Simple event">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div la:class="sylma.ui.Base" la:parent="example" la:name="test">
            <la:event name="click">sylma.tester.test(true);</la:event>
            <p>hello</p>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:callback>

      var test = example.test;
      test.node.fireEvent('click');

    </tst:callback>
  </tst:test>
  <tst:test name="Event on node">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div la:class="sylma.ui.Base" la:parent="example" la:name="test">
            <strong>
              <la:event name="click">sylma.tester.test(true);</la:event>
              world
            </strong>
            <p>hello</p>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:callback>

      var test = example.test;
      test.node.getElement('strong').fireEvent('click');

    </tst:callback>
  </tst:test>
  <tst:test name="Event on node with existing class">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div la:class="sylma.ui.Base" la:parent="example" la:name="test">
            <strong class="myclass">
              <la:event name="click">sylma.tester.test(this.tagName == 'STRONG');</la:event>
              world
            </strong>
            <p>hello</p>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:callback>

      var test = example.test;
      var result = test.getNode().getElement('strong').fireEvent('click');

    </tst:callback>
  </tst:test>
  <tst:test name="Simple method">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div la:class="sylma.ui.Base" la:parent="example" la:name="test">
            <la:method name="update">return 'abc';</la:method>
            <p>hello</p>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:expected>

      var test = example.test;
      return test.update() === 'abc';

    </tst:expected>
  </tst:test>
  <tst:test name="Method with arguments">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div la:class="sylma.ui.Base" la:parent="example" la:name="test">
            <la:method name="myTest" arguments="myarg">return myarg + 'world';</la:method>
            <p>hello</p>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:expected>

      var test = example.test;
      return test.myTest('hello') === 'helloworld';

    </tst:expected>
  </tst:test>
  <tst:test name="Overriding method">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <la:include>samples/sample1.js</la:include>
          <div la:class="sylma.samples.Sample1" la:parent="example" la:name="test">
            <la:method name="hello">return this.parent() + 'world';</la:method>
            <p>hello</p>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:expected>

      var test = example.test;
      return test.hello() === 'helloworld';

    </tst:expected>
  </tst:test>
  <tst:test name="Sub object">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div la:class="sylma.ui.Base" la:parent="example" la:name="test">
            <div>Hello world</div>
            <div la:class="sylma.ui.Base" la:name="sub">yup</div>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;
      var node = test.getObject('sub').getNode();

      return node.get('text') === 'yup';
    </tst:expected>
  </tst:test>
  <tst:test name="Replace sub object" disabled="true">
    <tst:prepare>
      $manager->set('result', $manager->getScript('samples/crud1.vml'));
    </tst:prepare>
    <tst:callback>

      var test = example.test.tmp[0];
      test.update();

    </tst:callback>
  </tst:test>
  <tst:test name="Sub object without name">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div la:class="sylma.ui.Base" la:parent="example" la:name="test">
            <div>Hello world</div>
            <div la:class="sylma.ui.Base">
              <la:event name="mouseover">return %object%.getNode();</la:event>
              <span>bonsoir</span>
            </div>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var tmp = example.test.tmp;
      var node = tmp[0].node.fireEvent('mouseover');

      return node.getChildren()[0].get('text') === 'bonsoir';
    </tst:expected>
  </tst:test>
  <tst:test name="Sub object with dynamic name">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div la:class="sylma.ui.Base" la:parent="example" la:name="test">
            <div>Hello world</div>
            <tpl:apply select="name,email" mode="field"/>
          </div>
        </view:template>
        <view:template match="user:*" mode="field">
          <div la:class="sylma.ui.Base">
            <la:name>
              <tpl:read select="alias()"/>
            </la:name>
            <tpl:read/>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;
      var node = test.getObject('email').getNode();

      return node.get('text') === 'admin@sylma.org';
    </tst:expected>
  </tst:test>
  <tst:test name="Simple property">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div la:class="sylma.ui.Base" la:parent="example" la:name="test">
            <la:option name="mykey">mytest</la:option>
            <div>Hello world</div>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;

      return test.get('mykey') === 'mytest';
    </tst:expected>
  </tst:test>
  <tst:test name="Property foreigner">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div la:class="sylma.ui.Base" la:parent="example" la:name="test">
            <la:option name="directory"><le:directory/></la:option>
            <div>Hello world</div>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;

      return test.get('directory') === '/sylma/template/binder/test';
    </tst:expected>
  </tst:test>
  <tst:test name="Simple sub node" disabled="true">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div la:class="sylma.ui.Base" la:parent="example" la:name="test">
            <div la:node="hello">Hello</div>
            <div>World</div>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;

      return test.getNode('hello').get('text') === 'Hello';
    </tst:expected>
  </tst:test>
  <tst:test name="Multiple sub nodes">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div la:class="sylma.ui.Base" la:parent="example" la:name="test">
            <p>Bla bla bla</p>
            <div la:node="hello">Hello</div>
            <div la:node="world">World</div>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;

      return test.getNode('hello').get('text') === 'Hello' &amp;&amp; test.getNode('world').get('text') === 'World';
    </tst:expected>
  </tst:test>
  <tst:test name="Event in view condition" disabled="true">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <view:template>
          <div>
            <tpl:if test="name = 'admin'">
              <h3 la:class="sylma.ui.Base" la:parent="example" la:name="test">
                <la:event name="click">
                  sylma.tester.test(true);
                </la:event>
                <tpl:text>is-admin</tpl:text>
              </h3>
            </tpl:if>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:callback>

      var test = example.test;
      test.node.fireEvent('click');

    </tst:callback>
  </tst:test>
</tst:tests>