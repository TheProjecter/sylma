<?xml version="1.0" encoding="utf-8"?>
<tst:tests
  xmlns:tst="http://www.sylma.org/core/argument/test"
  xmlns="http://www.sylma.org"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:arg="http://www.sylma.org/core/argument/test"
  arg:class="basic"
>
  <tst:description>Basic</tst:description>
  <tst:test name="A basic get()">
    <tst:prepare>
      $controler->set('arg', $controler->createArgument(array('abc' => '123')));
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      return $arg->read('abc') === '123'
    </tst:expected>
  </tst:test>
  <tst:test name="Get an object">
    <tst:prepare>
      $file = $controler->getFile('../samples/class.yml');
      $controler->set('arg', $controler->createArgument(array('abc' => $file)));
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      $file = $controler->getFile('../samples/class.yml');

      return $arg->read('abc') === $file
    </tst:expected>
  </tst:test>
  <tst:test name="Get an non-existing key" catch="\sylma\core\exception">
    <tst:prepare>
      $controler->set('arg', $controler->createArgument(array('abc' => 123)));
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      $arg->read('def');

      return 0
    </tst:expected>
  </tst:test>
  <tst:test name="Set an object">
    <tst:prepare>
      $file = $controler->getFile('../samples/class.yml');
      $arg = $controler->createArgument(array('abc' => 123));
      $arg->set('def', $file);

      $controler->set('arg', $arg);

    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      $file = $controler->getFile('../samples/class.yml');

      return
        $arg->read('abc') === 123 &amp;&amp;
        $arg->read('def') === $file
    </tst:expected>
  </tst:test>
  <tst:test name="A null query" disabled="true">
    <tst:prepare>
      $arg = $controler->createArgument(array('abc' => 123));
      $arg->set(null);
      $controler->set('arg', $arg);
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      return $arg->query() === array(null)
    </tst:expected>
  </tst:test>
  <tst:test name="Merge">
    <tst:prepare>
      $arg1 = $controler->createArgument(array(
        'abc' => 123, // not erased
        'def' => '456',
      ));
      $arg2 = $controler->createArgument(array(
        'def' => '789',
        'ghi' => true
      ));

      $arg1->merge($arg2);
      $controler->set('arg', $arg1);
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      return
        $arg->read('abc') === 123 &amp;&amp;
        $arg->read('def') === '789' &amp;&amp;
        $arg->read('ghi') === true
    </tst:expected>
  </tst:test>
  <tst:test name="Merge two levels depth">
    <tst:prepare>
      $arg1 = $controler->createArgument(array(
        'abc' => array(
          'def' => '123',
          'ghi' => 456,
        ),
        'def' => '789', // not erased
        'ghi' => array(
          'lmn' => 1010,
          'opq' => true,
        ),
        'rst' => 2323,
      ));
      $arg2 = $controler->createArgument(array(
        'abc' => 'alpha', // simple erase array
        'ghi' => array( // array erase array
          'uvw' => false,
          'opq' => 3434,
        ),
        'rst' => array( // array erase simple
          'xyz' => 'beta'
        ),
      ));

      $arg1->merge($arg2);
      $controler->set('arg', $arg1);
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      return
        $arg->read('abc') === 'alpha' &amp;&amp;
        $arg->read('def') === '789' &amp;&amp;
        $arg->read('ghi/lmn') === 1010 &amp;&amp;
        $arg->read('ghi/opq') === 3434 &amp;&amp;
        $arg->read('ghi/uvw') === false &amp;&amp;
        $arg->read('rst/xyz') === 'beta'
    </tst:expected>
  </tst:test>
  <tst:test name="Iterate">
    <tst:prepare>
      $controler->set('arg', $controler->createArgument(array(
        'abc' => '123',
        'def' => 456,
      )));
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      $aResult = array();

      foreach ($arg as $sKey => $sub) {
        $aResult[$sKey] = $sub;
      }

      return $aResult == array(
        'abc' => '123',
        'def' => 456,
      );
    </tst:expected>
  </tst:test>
</tst:tests>

